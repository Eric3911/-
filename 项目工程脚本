#一、批量修改xml节点voc脚本
# coding=utf-8
import os
import os.path
import xml.dom.minidom

#获得文件夹中所有文件
FindPath = '/home/ubuntu/Desktop/myvoc2007/Annotations/'
FileNames = os.listdir(FindPath)
s = []
xml_path = '/home/ubuntu/Desktop/new/'
for file_name in FileNames:
    if not os.path.isdir(file_name):  # 判断是否是文件夹,不是文件夹才打开
        print file_name

    #读取xml文件
    dom = xml.dom.minidom.parse(os.path.join(FindPath,file_name))
    root = dom.documentElement

    # 获取标签对name之间的值
    name = root.getElementsByTagName('name')
    for i in range(len(name)):
        print name[i].firstChild.data
        if name[i] .firstChild.data== 'screw cap':
            name[i].firstChild.data = 'screwnut'
            print '修改后的 name'
            print name[i].firstChild.data
    #将修改后的xml文件保存
    with open(os.path.join(xml_path, file_name), 'w') as fh:
        dom.writexml(fh)
        print('写入name/pose OK!')
        
        
        
#二、图片文件批量重命名
import os

class ImageRename():
    def __init__(self):
        self.path = 'C:/yawning/'

    def rename(self):
        filelist = os.listdir(self.path)
        total_num = len(filelist)

        i = 0

        for item in filelist:
            if item.endswith('.jpg'):
                src = os.path.join(os.path.abspath(self.path), item)
                dst = os.path.join(os.path.abspath(self.path), '' + format(str(i), '0>3s') + '.jpg')
                os.rename(src, dst)
                print('conerting %s to %s ...' %(src,dst))
                i = i + 1
        print( 'total %d to rename & converted %d jpgs'%(total_num, i))

if __name__ == '__main__':
    newname = ImageRename()
    newname.rename()  
  
#三、爬取图像（以后尝试爬取视频）
import urllib.request
import re
def getHtml(url):
#url = urllib.parse.quote(url)
	page = urllib.request.urlopen(url)
	html = page.read()
	return html
def getImg(html):
	reg = 'src ="(.+?\.jpg)" alt='
	image = re.compile(reg)
	html =html.decode('utf-8') #python3
	imglist = re.findall(imgre,html)
	x  = 0
	for imgurl in imglist:
	urllib.request.urlretrieve(imgurl,'%s.jpg'% x)
	x+=1
	return imglist
html = getHtml("http://www.123.com/13.html")
print(getImg(html))



#四、将视频按照帧数转换成图片（一帧12张）
import cv2
vc = vc2.VideoCapture("initialD.mp4")
c=1
if vc.isOpened():
	rval,frame=vc.read()
else:
	rval=False
while rval:
	rval,frame=vc.read()
	cv2.imwrite('F://selffakeedataset//'+str(r)'.jpg',frame)
	c=c+1
	cv2.waitKey(1)
	vc.release()
  
  
#五、数据增强（通过旋转模糊和剪切将一张图片扩增为50张）
#https://github.com/aleju/imgaug
from keras.preprocessing.image import ImageDataGenerator，arry_to_img,img_to_array,load_img
	datagen = ImageDataGenerator(
	rotation_range=30,#参数为整数，图片随机转动的角度
	width_shift_range=0.2,#参数为浮点数，图片水平比例偏移的幅度
	height_shift_range =0.2,#参数为浮点数，图片竖直偏移的幅度
	shear_range=0.2,#参数为浮点数，逆时针方向剪切变换的角度
	zoom_range=0.2,#参数为浮点数，随机旋转的幅度
	horizontal_flip=Ture,#布尔值，进行随机水平翻转
	fil=mode='nearest')#参数为costant/nearest/reflect/wrap/，进行变化时候超出边界的点根据本参数的方法处理。
img = load_img('C:/users/train/000012''.jpg')#这是一个PIL图像
x = img_to_array(img)#把一个PIL图像转换成一个numpy数组形状为（3，150，150）
x = x.reshape((1,)+x.shape)#这是一个numpy数组形状为（1，3，150，150）
#下面是生成图像的代码
i = 0
for batch in datagen.flow(x,batch_size=1,save_to_dir='C:/PIC/',save_prefix='smoking',save_foramt='jpeg'):
	i += 1
	if i > 50:
	break #否则退出生成器循环。
  
  
  
#六、根据图片和xml文件扩增数据
import cv2
import math
import numpy as np
import xml.etree.ElemetTree as ET
import os

def rotate_imge(src,angle,scale=1):
	w = src.shape[1]
	h = src.shape[0]
	#将角度转化为弧度
	range=np.deg2rad(angle)
	#从新计算图片的宽度和高度
	nw=(abs(np.sin(angle)*h)+abs(np.cos(rangle)*w))*scale
	nh=(abs(np.cos(angle)*h)+abs(np.sin(rangle)*w))*scale
	#访问opencv的旋转矩阵
	rot_mat = cv2.getRotationMatrix2D(nw*0.5,nh*0.5),angle,scale)
	#随着旋转计算从旧中心到新中心
	rot_move = np.dot(rot_mat,np.arry([(nw - w)*0.5,(nh -h)*0.5,0]))
	#这部分的转秩只是为了更新部分的参数转秩更新
	rot_mat[0,2] += rot_move[0]
	rot_mat[1,2] += rot_move[1]
	dst =cv2.warpAffine(src,rot_mat,(int(math.ceil(nw)),int(math.ceil(nh))),flages=cv2.INTER_LANCZ0S4)
	#仿射变化
	return dst
	def rotate_xml(src,xmin,ymin,xmax,ymax,angle,scale=1.):
	w = src.shape[1]
	h = src.shape[0]
	rangle = np.deg2rad(angle)
	#将弧度转为角度，获取旋转后图像的宽度和长度。
	nw =(abs(np.sin(rangle)*h)+abs(np.cos(rangle)*w))*scale
	nh = (abs(np.cos(rangle)*h))+abs(np.sin(rangle)*w)*scale
	#访问opencv的旋转矩阵
	rot_mat = cv2.getRotationMatrix2D((nw*0.5,nh*0.5),angle,scale)
	#计算随着旋转从旧中心到新中心
	rot_move = np.dot(rot_mat,np.arry([(nw-w)*0.5,(nh-h)*0.5,0]))
	rot_mat[0,2] += rot_move[0]
	rot_mat[1,2] += rot_move[1]
	point1 = np.dot(rot_mat,np.arry([(xmin+xmax)/2,ymin,1]))
	point2 = np.dot(rot_mat,np.arry([xmax,(ymin=ymax)/2,1]))
	point3 = np.dot(rot_mat,np.arry([(xmin+xmax)/2,ymax,1]))
	point4 = np.dot(rot_mat,np.arry([xmin,(ymin+ymax)/2,1]))
	concat = np.vstack((point1,point2,point3,point4))
	#修改arry类型
	concat = concat.astype(np.int32)
	rx,ry,rw,rh = cv.boundingRect(concat)
	return rx,ry,rw,rh
	#源图像路径
	imgpath = 'c:/data/1/'
	#源图像对应的标注xml
	xmlpath = 'C:/data/2/'
	#旋转后图像存放路径
	rotated_imgpath ='c:/data/3/'
	#旋转后的xml存放路径
	rotated_xmlpath ='c:/data/4/'
	for angle in (180,360):
	for i in os.listdir(imgpath):
	a,b = os.path.splitext(i)
	img = cv2.imwrite(imgpath+a+'.jpg')
	rotated_img = rotated_imgpath(img,angle)
	cv2.imwrite(rotated_imgpath+a+''+str(angle)+'d.jpg',rotated_img)
	print(str(i)+'has been rotated for'+str(angle)+'。')
	tree = ET.parse(xmlpath+a+'.xml')
	root = tree.getroot()
	for box in root.iter('bndbox'):
	xmin = float(box.find('xmin').text)
	ymin = float(box.find('ymin').text)
	xmax = float(box.find('xmax').text)
	ymax = float(box.find('yamx').text)
	x,y,w,h = rotate_xml(img,xmin,ymin,xmax,ymax,angle)#可以使用该步骤查看转换后的参数是否正确
	
	box.find('xmin').text = str(x)
	box.find('ymin').text = str(y)
    box.find('xmax').text = str(x+w)
	box.find('ymax').text = str(y+h)
    tree.write(rotate_xmlpath+a+'_'+str(angle)+'d.xml')
	print(str(a)+'.xml has been rotated for'+str(angle)+'。')
	
#七通过四个点坐标提起区域其他背景全mask为黑

# scale的问题  图片宽高scale多少，咱们的框也相应scale多少就行



import numpy as np
import cv2

# 读取原始图像
img = cv2.imread('./sample.jpg')

# 显示图像
cv2.imshow("original", img)

# 定义roi列表,按(xmin,xmax,ymin,ymax)格式存放所有roi
roi_list = list()

# rois的ndarray对象
# 四个顶点坐标:依次为左上,右上,右下,左下
# 取roi区域时,只需要知道xmin,xmax,ymin,ymax即可,对应左上和右下的两个点
rois = np.array([
    [[14, 29], [499, 29], [499, 44], [14, 44]],
    [[66, 63], [275, 63], [275, 105], [66, 105]]
    ])

# 遍历rois的ndarray对象,按照指定格式存入roi_list
# 第一种方式:取第1个点和第3个点
# 局限性:只对顺时针有效
# for roi in rois:
#     roi_list.append((roi[0][0], roi[2][0], roi[0][1], roi[2][1]))

# 第二种方式:直接使用最大最小值来取
# 优点:不用管各个点的顺序是顺时针或者逆时针.无序也可
# 局限性:必须是矩形的四个顶点
for roi in rois:
    xmin = np.min([coordinates[0] for coordinates in roi])
    xmax = np.max([coordinates[0] for coordinates in roi])
    ymin = np.min([coordinates[1] for coordinates in roi])
    ymax = np.max([coordinates[1] for coordinates in roi])
    roi_list.append((xmin, xmax, ymin, ymax))

# 构建一个新的结果图像
result = np.zeros_like(img)

# 取原始图像中取对应roi数据,赋值给结果图像对应位置,注意y在前x在后
for roi in roi_list:
    result[roi[2]:roi[3], roi[0]:roi[1]] = img[roi[2]:roi[3], roi[0]:roi[1]]

# 显示结果图像
cv2.imshow("result", result)
cv2.waitKey(0)


#八XML与txt的转换
#!/usr/bin/env python
# coding:utf-8
from lxml.etree import Element, SubElement, tostring
from xml.dom.minidom import parseString
import glob
import os
from PIL import Image
from tqdm import tqdm
def txtToXml(image_path, txt_path):
    for txt_file in tqdm(glob.glob(txt_path + '/*.txt')):
        txt_name_ = txt_file.split('\\')[-1][:-4]
        data = {"shapes": []}
        im = Image.open(image_path + '\\' + txt_name_ +'.jpg')
        width = im.size[0]
        height = im.size[1]
        tree = open(txt_file, 'r', encoding='UTF-8')
        node_root = Element('annotation')
        node_folder = SubElement(node_root, 'folder')
        node_folder.text = 'ICPR'
        node_filename = SubElement(node_root, 'filename')
        node_filename.text = txt_name_+ '.jpg'
        node_size = SubElement(node_root, 'size')
        node_width = SubElement(node_size, 'width')
        node_width.text = str(width)
        node_height = SubElement(node_size, 'height')
        node_height.text = str(height)
        node_depth = SubElement(node_size, 'depth')
        node_depth.text = '3'
        root = tree.readlines()
        for i, line in enumerate(root):
            column = line.split(',')
            node_object = SubElement(node_root, 'object')
            node_name = SubElement(node_object, 'name')
            node_name.text = 'text'    #做的是第二个项目，所以就把文本统一成了text
            node_difficult = SubElement(node_object, 'difficult')
            node_difficult.text = '0'
            node_bndbox = SubElement(node_object, 'bndbox')
            node_xmin = SubElement(node_bndbox, 'x0')
            node_xmin.text = column[0]
            node_ymin = SubElement(node_bndbox, 'y0')
            node_ymin.text = column[1]
            node_xmax = SubElement(node_bndbox, 'x1')
            node_xmax.text = column[2]
            node_ymax = SubElement(node_bndbox, 'y1')
            node_ymax.text = column[3]
            node_xmin = SubElement(node_bndbox, 'x2')
            node_xmin.text = column[4]
            node_ymin = SubElement(node_bndbox, 'y2')
            node_ymin.text = column[5]
            node_xmax = SubElement(node_bndbox, 'x3')
            node_xmax.text = column[6]
            node_ymax = SubElement(node_bndbox, 'y3')
            node_ymax.text = column[7]
        xml = tostring(node_root, pretty_print=True)  #格式化显示，该换行的换行
        dom = parseString(xml)
        with open(txt_name_ + '.xml', 'w') as f:
            dom.writexml(f, indent='\t', addindent='\t', newl='\n', encoding="utf-8")
 
 
if __name__ == "__main__":
    data_path = os.path.join(os.getcwd(), 'txt_1000')
    pic_path = os.path.join(os.getcwd(), 'image_1000')
    txtToXml(pic_path, data_path )


八、 
import cv2
import numpy as np
import matplotlib.pyplot as plt

img = cv2.imread('C:/Users/Administrator/Desktop/15.jpg',1)

#第一个为纵坐标参数，第二个为横坐标
points = np.array([[50, 1], [1, 50], [98, 98], [98, 1]])

cv2.fillConvexPoly(img, points,1)
plt.imshow(img, cmap='gray')
plt.show()



  
  
	
